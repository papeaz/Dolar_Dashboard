name: Actualizar data.json

on:
  schedule:
    # Ejecutar a las 00:00, 08:00 y 16:00 UTC
    - cron: '0 */8 * * *'
  workflow_dispatch:

jobs:
  update-data:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Instalar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Obtener precio paralelo y actualizar data.json
        *** Begin Patch
*** Update File: .github/workflows/update_data.yml
@@      - name: Obtener precio paralelo y actualizar data.json
-        run: |
-          python - <<PY
-          import json, datetime
-          import requests
+        run: |
+          python - <<PY
+import json, datetime, requests, sys
+
+url = "https://bo.dolarapi.com/v1/dolares/binance"
+resp = requests.get(url)
+if resp.status_code != 200:
+    print("Error al obtener API", file=sys.stderr)
+    sys.exit(1)
+data = resp.json()
+precio = data.get("venta")
+fecha  = data.get("fechaActualizacion","").split("T")[0]
+if not precio or not fecha:
+    print("Respuesta inválida", file=sys.stderr)
+    sys.exit(1)
+
+historico = []
+try:
+    with open("data.json", "r", encoding="utf-8") as f:
+        historico = json.load(f)
+except FileNotFoundError:
+    pass
+
+if not any(x["fecha"] == fecha for x in historico):
+    historico.append({"fecha": fecha, "precio": precio})
+    historico.sort(key=lambda x: x["fecha"])
+    with open("data.json", "w", encoding="utf-8") as f:
+        json.dump(historico, f, ensure_ascii=False, indent=2)
+    print(f"Agregado: {fecha} → {precio}")
+else:
+    print(f"Ya existe registro para {fecha}")
+PY
*** End Patch


      - name: Commit & Push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data.json
          git commit -m "Update data.json [ci skip]" || echo "No hay cambios"
          git push
