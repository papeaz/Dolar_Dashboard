name: Actualizar data.json

on:
  schedule:
    # Ejecutar cada 8 horas (a las 00:00, 08:00 y 16:00 UTC)
    - cron: '0 */8 * * *'
  workflow_dispatch:
    # Permitir ejecución manual desde la UI de GitHub
    {}

jobs:
  update-data:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Fetch new price and update data.json
        run: |
          python - <<'PY'
          import json, datetime, urllib.request, ssl, os, sys

          # URL de DolarApi para el dólar paralelo en Bolivia (fuente Binance)
          url = 'https://bo.dolarapi.com/v1/dolares/binance'
          context = ssl.create_default_context()
          with urllib.request.urlopen(url, context=context) as response:
            data = json.loads(response.read().decode('utf-8'))

          # Precio de venta del dólar paralelo en BOB
          precio = data.get('venta')
          if precio is None:
            print('No se pudo obtener el precio de venta', file=sys.stderr)
            sys.exit(0)

          # Fecha UTC actual en formato YYYY-MM-DD
          fecha = datetime.datetime.utcnow().strftime('%Y-%m-%d')

          # Leer el archivo data.json existente
          data_file = 'data.json'
          try:
            with open(data_file, 'r', encoding='utf-8') as f:
              historico = json.load(f)
          except FileNotFoundError:
            historico = []

          # Verificar si la fecha ya está en el historial para evitar duplicados
          existe = any(entry.get('fecha') == fecha for entry in historico)
          if not existe:
            historico.append({'fecha': fecha, 'precio': precio})
            with open(data_file, 'w', encoding='utf-8') as f:
              json.dump(historico, f, ensure_ascii=False, indent=2)
            print(f'Se agregó el dato del {fecha} con precio {precio}')
          else:
            print(f'El dato para la fecha {fecha} ya existe, no se realizaron cambios')
          PY

      - name: Commit and push changes
        run: |
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git config user.name github-actions[bot]
            git config user.email github-actions[bot]@users.noreply.github.com
            git add data.json
            git commit -m "Actualizar data.json automáticamente"
            git push
